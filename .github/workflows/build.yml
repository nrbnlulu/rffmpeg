name: build
on:
  push:
    branches:
      - main
      - master
  pull_request:
  schedule:
    - cron: "0 0 * * *"
jobs:
  build-test-lint-linux:
    name: Linux - FFmpeg ${{ matrix.ffmpeg_version }} - build, test and lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - ffmpeg_version: latest
            asset_url: "ffmpeg-master-latest-linux64-gpl-shared.tar.xz"
          - ffmpeg_version: 7.1
            asset_url: "ffmpeg-n7.1-latest-linux64-gpl-shared-7.1.tar.xz"
          - ffmpeg_version: 6.1
            asset_url: "ffmpeg-n6.1.2-31-gf120f66838-linux64-gpl-shared-6.1.tar.xz"

      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "10.0"
      - name: Install ffmpeg
        id: setup-ffmpeg
        run: |
          BASE_URL="https://github.com/BtbN/FFmpeg-Builds/releases/download/latest"
          echo "Downloading FFmpeg version: ${{ matrix.ffmpeg_version }}"
          echo "Downloading asset: ${{ matrix.asset_url }}"
          curl -L --fail "${BASE_URL}/${{ matrix.asset_url }}" -o ffmpeg.tar.xz
          if [ ! -f ffmpeg.tar.xz ]; then
            echo "FFmpeg download failed"
            exit 1
          fi
          mkdir -p ffmpeg
          echo "Extracting FFmpeg to ffmpeg directory"
          tar -xf ffmpeg.tar.xz -C ffmpeg --strip-components=1
          echo "ffmpeg-path=$(pwd)/ffmpeg" >> $GITHUB_OUTPUT
          echo "FFmpeg directory structure:"
          find ffmpeg | sort
          echo "PKG_CONFIG_PATH=$(pwd)/ffmpeg/lib/pkgconfig" >> $GITHUB_ENV

      - name: check that pkg-config can find ffmpeg
        run: |
          export PKG_CONFIG_PATH="${{ steps.setup-ffmpeg.outputs.ffmpeg-path }}/lib/pkgconfig"
          echo "Listing contents of ${{ steps.setup-ffmpeg.outputs.ffmpeg-path }}:"
          ls -l "${{ steps.setup-ffmpeg.outputs.ffmpeg-path }}"
          pkg-config --cflags --libs libavformat libavcodec libavutil libswscale || exit 1
          echo "pkg-config found ffmpeg libraries successfully"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Build
        run: |
          echo "${{ matrix.ffmpeg_version }}" 
          echo "FFMPEG PATH ${{ steps.setup-ffmpeg.outputs.ffmpeg-path }}"
          cargo build --examples
      - name: Test
        run: |
          cargo test --examples
      - name: Lint
        run: |
          cargo clippy --examples -- -D warnings
      - name: Check format
        run: |
          cargo fmt -- --check

  build-test-lint-macos:
    name: macOS - FFmpeg latest - build, test and lint
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          brew install ffmpeg pkg-config
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --examples
      - name: Test
        run: |
          cargo test --examples
      - name: Lint
        run: |
          cargo clippy --examples -- -D warnings
      - name: Check format
        run: |
          cargo fmt -- --check

  build-test-lint-windows:
    name: Windows - FFmpeg ${{ matrix.ffmpeg_version }} - build, test and lint
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - ffmpeg_version: 7.1.1
            ffmpeg_download_url: https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.1.1-full_build-shared.7z
          - ffmpeg_version: 7.0.2
            ffmpeg_download_url: https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.0.2-full_build-shared.7z
      fail-fast: false
    env:
      FFMPEG_DOWNLOAD_URL: ${{ matrix.ffmpeg_download_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          curl -L --fail "${env:FFMPEG_DOWNLOAD_URL}" -o ffmpeg-release-full-shared.7z
          if (!(Test-Path ffmpeg-release-full-shared.7z)) { Write-Error "FFmpeg download failed"; exit 1 }
          7z x ffmpeg-release-full-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --examples
      - name: Test
        run: |
          cargo test --examples
      - name: Lint
        run: |
          cargo clippy --examples -- -D warnings
      - name: Check format
        run: |
          cargo fmt -- --check
